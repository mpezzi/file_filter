<?php

/**
 * @file
 * Provides a filter to convert file placeholders.
 */


/**
 * Implements hook_filter_info().
 */
function file_filter_filter_info() {
  return array(
    'file_filter' => array(
      'title' => t('File Filter'),
      'description' => t('Provides a filter to convert file placeholders.'),
      'process callback' => '_file_filter_process',
      'settings callback' => '_file_filter_settings',
      'tips callback' => '_file_filter_tips',
    ),
  );
}

/**
 * Filter process callback.
 */
function _file_filter_process($text, $format) {
  $types = module_invoke_all('file_filter_type');

  // Look for [fid:*:*:*] token formats.
  if ( preg_match_all('/\[fid(\:(.+))?\]/isU', $text, $matches) ) {
    foreach ( $matches[0] as $key => $match ) {

      // Parse arguments as an array.
      $arg_match = $match;
      $arg_match = str_replace('[', '', $arg_match);
      $arg_match = str_replace(']', '', $arg_match);
      $args = explode(':', $arg_match);

      // Get fid and type.
      $dummy = array_shift($args); // we don't need this dummy value, so shift it off the array.
      $fid = array_shift($args);
      $type = array_shift($args);

      // Load file object from database.
      if ( $file = file_load($fid) ) {

        // Prepend file object to arguments.
        array_unshift($args, $file);

        // Render differently based on process types.
        if ( isset($types[$type]) ) {
          $replace = call_user_func_array($types[$type]['process callback'], $args);
        }
        else {
          $replace = variable_get('file_filter_type_not_found', t('File Filter Process %type was not found.', array(
            '%type' => $type,
          )));
        }
      }
      else {
        $replace = variable_get('file_filter_file_not_found', t('File %fid was not found.', array(
          '%fid' => $fid,
        )));
      }

      $text = str_replace($match, $replace, $text);
    }
  }

  return $text;
}

/**
 * Filter settings callback.
 */
function _file_filter_settings($form, &$form_state, $filter, $format, $defaults) {
  // @TODO: Add filter configuration settings.
  return array();
}

/**
 * Filter tips callback.
 */
function _file_filter_tips($format, $long = FALSE) {
  if ( $long ) {
    // @TODO: Add long tips.
    return t('Long Tips');
  }
  else {
    // @TODO: Add short tips.
    return t('Short Tips');
  }
}

/**
 * Implements hook_file_filter_type().
 */
function file_filter_file_filter_type() {
  return array(
    'absolute' => array(
      'process callback' => '_file_filter_process_absolute',
    ),
    'relative' => array(
      'process callback' => '_file_filter_process_relative',
    ),
    'image' => array(
      'process callback' => '_file_filter_process_image',
    ),
  );
}

/**
 * Filter Process Type: Absolute
 */
function _file_filter_process_absolute($file) {
  return file_create_url($file->uri);
}

/**
 * Filter Process Type: Relative
 */
function _file_filter_process_relative($file) {
  return base_path() . str_replace($GLOBALS['base_url'] . '/', '', file_create_url($file->uri));
}

/**
 * Filter Process Type: Image
 */
function _file_filter_process_image($file, $style_name = NULL) {
  if ( !is_null($style_name) ) {
    $output = theme('image_style', array(
      'path' => $file->uri,
      'style_name' => $style_name,
    ));
  }
  else {
    $output = theme('image', array(
      'path' => $file->uri,
    ));
  }

  return $output;
}
